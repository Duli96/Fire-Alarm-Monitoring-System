/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.awt.Color;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;



import java.awt.Component;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;


import org.json.JSONArray;

/**
 *
 * @author user
 */
public class sensorui extends javax.swing.JFrame {

 public List<Sensor> sensors;
 public Sensor c;
 public DefaultTableModel table ;
 public login loginPage = new login();
 public FireAlarmSensor sensor;
 public Client client;
 public addsensorui1 addUi;
 public tableCellAlignment centerAlign = new tableCellAlignment();
    /**
     * Creates new form sensorui
     */
    public sensorui() {
        initComponents();
       
    }

    
    //----------get sensorlist----------------
     public void sensorList(List<Sensor> sensorList){
    
        this.sensors = sensorList;
    }
     
    //---------add details to the table---------- 
    
    public void show_sensor() throws JSONException, IOException{
    
    	
    	sensorTable.getColumnModel().getColumn(0).setCellRenderer(centerAlign);
    	sensorTable.getColumnModel().getColumn(1).setCellRenderer(centerAlign);
    	sensorTable.getColumnModel().getColumn(2).setCellRenderer(centerAlign);
    	sensorTable.getColumnModel().getColumn(3).setCellRenderer(centerAlign);
    	sensorTable.getColumnModel().getColumn(4).setCellRenderer(centerAlign);
        table = (DefaultTableModel) sensorTable.getModel(); 
        Object[] column = new Object[5];
       
        for(int i=0;i<sensors.size();++i){
        	 column[0] = sensors.get(i).getId();
             column[1] = sensors.get(i).getFloorNo();
             column[2] = sensors.get(i).getRoomNo();
             column[3] = sensors.get(i).getSmokeLevel();
             column[4] = sensors.get(i).getCdLevel();
            table.addRow(column);
            
           
        
        }
        
        
    }
    
    //---------------update table cells-------------------
    public void selectSID(){
    
        for(Sensor s:sensors){
        
        
        updateCell(s.getFloorNo(),s.getRoomNo(),s.getSmokeLevel(),s.getCdLevel());
        }
        
    
    
    }
    
    public void updateCell(int floor,String room,double smoke,double cd){
    	
    	//---show warning message to the user when increasing the smoke level of or carbon dioxide level-----------
    	if(smoke > 5) {
    		JOptionPane.showMessageDialog(this, "             Warning!!\n"+
    	                                       "Smoke Level is increasing");
    	}else if(cd > 5) {
    		
    		JOptionPane.showMessageDialog(this, "             Warning!!\n"+
                   "Carbon Dioxide Level is increasing");
    	}
    
    	//--------Updating the table cells with relevant details-----------
        for(int i = 0;i<table.getRowCount();++i){
           
            if(table.getValueAt(i, 0).equals(floor) && table.getValueAt(i, 1).equals(room)){
                
                 table.setValueAt(smoke, i, 2);
                 table.setValueAt(cd, i, 3);
            }
        
        }
    
        
    }
    
    //------------get the server-----------------
    
    public void getServer( FireAlarmSensor sensor) {
    	this.sensor = sensor;
    }
   
    //------------get the client-----------------
    public void getClient(Client c) {
  	  this.client = c;
  	  
  	  
    }
  //------------refresh the table for display the updated details-----------------
    public void refreshTable() {
    	
    	table.setRowCount(0);
         
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        label1 = new java.awt.Label();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        sensorTable = new javax.swing.JTable(){

            //---------changing the table cell colour---------------------
            @Override

            public Component prepareRenderer (TableCellRenderer renderer, int rowIndex, int columnIndex){

                Component componenet = super.prepareRenderer(renderer, rowIndex, columnIndex);

                Object value = getModel().getValueAt(rowIndex,columnIndex);

                if(columnIndex == 3){

                    if((double)value > 5)
                    {
                        componenet.setBackground(Color.RED);
                        componenet.setForeground(Color.BLACK);

                    }else if((double)value < 5){
                        componenet.setBackground(Color.WHITE);
                        componenet.setForeground(Color.BLACK);

                    }

                }

                if(columnIndex == 4){
                    if((double)value > 5)
                    {

                        componenet.setBackground(Color.RED);
                        componenet.setForeground(Color.BLACK);

                    }else if((double)value < 5){
                        componenet.setBackground(Color.WHITE);
                        componenet.setForeground(Color.BLACK);

                    }
                }
                
                if(columnIndex == 0 || columnIndex == 1 || columnIndex == 2) {
                	componenet.setBackground(Color.WHITE);
                    componenet.setForeground(Color.BLACK);
                	
                }
                return componenet;
            }

        };
        addbtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(51, 51, 255));

        label1.setFont(new java.awt.Font("Times New Roman", 1, 28)); // NOI18N
        label1.setForeground(new java.awt.Color(255, 255, 255));
        label1.setText("Fire Alarm Sensor Details");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(217, 217, 217)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(219, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(19, 19, 19))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 750, 70));

        jPanel2.setBackground(new java.awt.Color(102, 153, 255));

        sensorTable.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        sensorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                
            },
            new String [] {
                "Sensor ID","Floor Number ", "Room Number", " Smoke Level", "Carbon Dioxide Level"
            }
        ) {
            Class[] types = new Class [] {
            		java.lang.String.class,java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
            		false,false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        sensorTable.setFocusable(false);
        sensorTable.setIntercellSpacing(new java.awt.Dimension(0, 0));
        sensorTable.setRowHeight(25);
        sensorTable.setSelectionBackground(new java.awt.Color(204, 204, 204));
        sensorTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(sensorTable);

        addbtn.setBackground(new java.awt.Color(255, 255, 51));
        addbtn.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        addbtn.setForeground(new java.awt.Color(102, 102, 102));
        addbtn.setText("Add/Edit Sensor");
        addbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 653, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(47, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(166, 166, 166))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(addbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 750, 320));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addbtnActionPerformed
       //-------check if the user has logged in---------
    	
    	if(client.getLoginStatus() == false) {
            loginPage.setVisible(true);
            loginPage.getServer(sensor);
            loginPage.getClient(client);
            
    	}else if(client.getLoginStatus() == true) {
    		
    		addUi =  new addsensorui1 ();
 	       addUi.setVisible(true);
 	       addUi.getServer(sensor);
    	}
    }//GEN-LAST:event_addbtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        
//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(sensorui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(sensorui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(sensorui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(sensorui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new sensorui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addbtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private java.awt.Label label1;
    private javax.swing.JTable sensorTable;
    // End of variables declaration//GEN-END:variables
}
